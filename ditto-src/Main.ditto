module Main exports (
    main,
)

import (js-task) Task

import (std) Maybe (
    Maybe(..),
)
import (std) Never (
    Never,
)
import (std) Result (
    Result(..),
)

import (vdom) App
import (vdom) Attributes as Attr
import (vdom) Element (
    Element,
)
import (vdom) Events
import (vdom) Html

import Compiler
import Editor (
    Editor,
)


main = fn (container: Element): Effect(Unit) -> App.mount(
    {
        container = container,
        init = fn () -> {state = initial_state, task = Just(init_compiler) },
        view = view,
        update = update,
    },
)

type alias Task = Task.Task(Event, Never)

init_compiler: Task =
    Compiler.init
    |> Task.and_then(
        fn (compiler) -> Task.from_effect(
            do {
                compiler.greet("loaded!");
                return compiler
            },
        ),
    )
    |> Task.map_result(fn (_) -> Ok(NoOp))

type alias State = { render_editor: Bool, editor: Maybe(Editor) }

initial_state: State = { render_editor = true, editor = Nothing }

type alias Html = Html.Html(Event)

view = fn (state: State): Array(Html) -> [
    if state.render_editor then
        Html.div(
            [
                Attr.id("editor"),
                Events.on_mount(EditorMounted),
                Events.on_unmount(EditorUnmounted),
            ],
            [],
        )
    else
        Html.empty,
]

type Event =
    | NoOp
    | EditorMounted(Element)
    | EditorInitialized(Editor)
    | EditorUnmounted

type alias Next = App.Next(State, Event)

code = "module Maybe exports (..)

type Maybe(a) = Just(a) | Nothing

"

update = fn (state: State, event: Event): Next ->
    match event with
    | NoOp -> { state = state, task = Nothing }
    | EditorMounted(element) -> {
        state = state,
        task = Just(
            Task.from_effect(Editor.init(code, element))
            |> Task.map_result(
                fn (result) ->
                    match result with
                    | Ok(editor) -> Ok(EditorInitialized(editor))
                    | Err(_) -> Ok(NoOp)
                    end,
            ),
        ),
    }
    | EditorInitialized(editor) -> {
        state = { state | editor = Just(editor) },
        task = Nothing,
    }
    | EditorUnmounted -> {
        state = state,
        task = Maybe.map(
            state.editor,
            fn (editor) ->
                Task.from_effect(Editor.destroy(editor))
                |> Task.map_result(fn (_) -> Ok(NoOp)),
        ),
    }
    end
